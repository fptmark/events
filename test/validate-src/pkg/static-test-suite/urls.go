package statictestsuite

// TestCase represents a static test case from curl.sh
type TestCase struct {
	Verb      string
	URL       string
	TestClass string
	Description string
}

// GetAllTestCases returns all test cases from curl.sh
func GetAllTestCases() []TestCase {
	return []TestCase{
		{"GET", "http://localhost:5500/api/User/basic_valid_001", "basic", "Get valid user"},
		{"GET", "http://localhost:5500/api/User/basic_invalid_enum_001", "basic", "Get user with bad enum"},
		{"GET", "http://localhost:5500/api/User/basic_invalid_currency_001", "basic", "Get user with bad currency"},
		{"GET", "http://localhost:5500/api/User/basic_missing_required_001", "basic", "Get user with missing required fields"},
		{"GET", "http://localhost:5500/api/User/nonexistent_user_123456", "basic", "Get non-existent user"},
		{"GET", "http://localhost:5500/api/User", "basic", "Get user list"},
		{"GET", "http://localhost:5500/api/user", "basic", "Get user list (lowercase entity)"},
		{"GET", "http://localhost:5500/api/User?pageSize=3", "basic", "Get user list with page size"},
		{"GET", "http://localhost:5500/api/User/view_valid_fk_001?view=account(id)", "view", "Get valid user with account ID view"},
		{"GET", "http://localhost:5500/api/User/view_valid_fk_001?view=account(id,name,createdAt)", "view", "Get valid user with full account view"},
		{"GET", "http://localhost:5500/api/User/view_valid_fk_002?view=account(id,name)", "view", "Get valid user with different account view"},
		{"GET", "http://localhost:5500/api/User/view_invalid_fk_001?view=account(id)", "view", "Get user with expired account FK"},
		{"GET", "http://localhost:5500/api/User/view_missing_fk_001?view=account(id)", "view", "Get user with missing account FK"},
		{"GET", "http://localhost:5500/api/User/view_valid_fk_001?view=account(nonexistent_field)", "view", "Get valid user with invalid view field"},
		{"GET", "http://localhost:5500/api/User/view_valid_fk_001?view=badentity(id)", "view", "Get valid user with bad view entity"},
		{"GET", "http://localhost:5500/api/User?view=account(id)", "view", "Get user list with account ID view"},
		{"GET", "http://localhost:5500/api/User?view=account(id,name,createdAt)", "view", "Get user list with full account view"},
		{"GET", "http://localhost:5500/api/User?pageSize=3&view=account(id)", "view", "Get user list with pagination and view"},
		{"GET", "http://localhost:5500/api/User?pageSize=1&view=account(id,name,createdAt,balance)", "view", "Get user list with max view fields"},
		{"GET", "http://localhost:5500/api/User", "page", "Get user list with default pagination"},
		{"GET", "http://localhost:5500/api/User?pageSize=5", "page", "Get user list with page size 5"},
		{"GET", "http://localhost:5500/api/User?page=1&pageSize=5", "page", "Get user list page 1 with size 5"},
		{"GET", "http://localhost:5500/api/User?page=2&pageSize=5", "page", "Get user list page 2 with size 5"},
		{"GET", "http://localhost:5500/api/User?page=3&pageSize=5", "page", "Get user list page 3 with size 5"},
		{"GET", "http://localhost:5500/api/User?page=1&pageSize=1", "page", "Get user list page 1 with size 1"},
		{"GET", "http://localhost:5500/api/User?page=2&pageSize=1", "page", "Get user list page 2 with size 1"},
		{"GET", "http://localhost:5500/api/User?page=10&pageSize=5", "page", "Get user list page 10 (beyond data)"},
		{"GET", "http://localhost:5500/api/User?pageSize=100", "page", "Get user list with large page size"},
		{"GET", "http://localhost:5500/api/User?sort=firstName", "sort", "Sort by firstName ascending"},
		{"GET", "http://localhost:5500/api/User?sort=firstName:desc", "sort", "Sort by firstName descending"},
		{"GET", "http://localhost:5500/api/User?sort=lastName", "sort", "Sort by lastName ascending"},
		{"GET", "http://localhost:5500/api/User?sort=lastName:desc", "sort", "Sort by lastName descending"},
		{"GET", "http://localhost:5500/api/User?sort=netWorth", "sort", "Sort by netWorth ascending"},
		{"GET", "http://localhost:5500/api/User?sort=netWorth:desc", "sort", "Sort by netWorth descending"},
		{"GET", "http://localhost:5500/api/User?sort=createdAt", "sort", "Sort by createdAt ascending"},
		{"GET", "http://localhost:5500/api/User?sort=createdAt:desc", "sort", "Sort by createdAt descending"},
		{"GET", "http://localhost:5500/api/User?sort=firstName,lastName", "sort", "Sort by firstName then lastName"},
		{"GET", "http://localhost:5500/api/User?sort=firstName:desc,lastName", "sort", "Sort by firstName desc then lastName asc"},
		{"GET", "http://localhost:5500/api/User?sort=firstName:desc,lastName:desc", "sort", "Sort by firstName desc then lastName desc"},
		{"GET", "http://localhost:5500/api/User?sort=netWorth:desc,firstName", "sort", "Sort by netWorth desc then firstName asc"},
		{"GET", "http://localhost:5500/api/User?sort=firstName,lastName,netWorth", "sort", "Sort by three fields"},
		{"GET", "http://localhost:5500/api/User?sort=gender,netWorth:desc", "sort", "Sort by gender then netWorth desc"},
		{"GET", "http://localhost:5500/api/User?filter=firstName:Basic", "filter", "Filter by firstName contains 'Basic'"},
		{"GET", "http://localhost:5500/api/User?filter=lastName:User", "filter", "Filter by lastName contains 'User'"},
		{"GET", "http://localhost:5500/api/User?filter=gender:male", "filter", "Filter by gender male"},
		{"GET", "http://localhost:5500/api/User?filter=gender:female", "filter", "Filter by gender female"},
		{"GET", "http://localhost:5500/api/User?filter=isAccountOwner:true", "filter", "Filter by isAccountOwner true"},
		{"GET", "http://localhost:5500/api/User?filter=isAccountOwner:false", "filter", "Filter by isAccountOwner false"},
		{"GET", "http://localhost:5500/api/User?filter=netWorth:gt:50000", "filter", "Filter by netWorth > 50k"},
		{"GET", "http://localhost:5500/api/User?filter=netWorth:gte:50000", "filter", "Filter by netWorth >= 50k"},
		{"GET", "http://localhost:5500/api/User?filter=netWorth:lt:100000", "filter", "Filter by netWorth < 100k"},
		{"GET", "http://localhost:5500/api/User?filter=netWorth:lte:100000", "filter", "Filter by netWorth <= 100k"},
		{"GET", "http://localhost:5500/api/User?filter=netWorth:eq:75000", "filter", "Filter by netWorth = 75k"},
		{"GET", "http://localhost:5500/api/User?filter=gender:male,isAccountOwner:true", "filter", "Filter by gender male and account owner"},
		{"GET", "http://localhost:5500/api/User?filter=gender:female,netWorth:gte:50000", "filter", "Filter by gender female and wealthy"},
		{"GET", "http://localhost:5500/api/User?filter=firstName:View,gender:male", "filter", "Filter by firstName and gender"},
		{"GET", "http://localhost:5500/api/User?filter=netWorth:gte:25000,netWorth:lte:75000", "filter", "Filter by netWorth range"},
		{"GET", "http://localhost:5500/api/User?pagesize=5", "case", "pagesize parameter (lowercase)"},
		{"GET", "http://localhost:5500/api/User?PAGESIZE=5", "case", "PAGESIZE parameter (uppercase)"},
		{"GET", "http://localhost:5500/api/User?PageSize=5", "case", "PageSize parameter (mixed case)"},
		{"GET", "http://localhost:5500/api/User?page=2&pagesize=3", "case", "Mixed case page and pagesize"},
		{"GET", "http://localhost:5500/api/User?sort=firstname", "case", "Sort by firstname (lowercase)"},
		{"GET", "http://localhost:5500/api/User?sort=FIRSTNAME", "case", "Sort by FIRSTNAME (uppercase)"},
		{"GET", "http://localhost:5500/api/User?sort=FirstName", "case", "Sort by FirstName (mixed case)"},
		{"GET", "http://localhost:5500/api/User?sort=lastname:desc", "case", "Sort by lastname desc (lowercase)"},
		{"GET", "http://localhost:5500/api/User?filter=firstname:Basic", "case", "Filter by firstname (lowercase)"},
		{"GET", "http://localhost:5500/api/User?filter=FIRSTNAME:Basic", "case", "Filter by FIRSTNAME (uppercase)"},
		{"GET", "http://localhost:5500/api/User?filter=FirstName:Basic", "case", "Filter by FirstName (mixed case)"},
		{"GET", "http://localhost:5500/api/User?filter=GENDER:male", "case", "Filter by GENDER (uppercase)"},
		{"GET", "http://localhost:5500/api/User?filter=gender:MALE", "case", "Filter by gender with MALE value"},
		{"GET", "http://localhost:5500/api/User?Page=1&PageSize=5", "case", "Mixed case Page and PageSize"},
		{"GET", "http://localhost:5500/api/User?view=account(id)&sort=firstName", "combo", "View with sort"},
		{"GET", "http://localhost:5500/api/User?view=account(id,name)&sort=firstName:desc", "combo", "Full account view with sort desc"},
		{"GET", "http://localhost:5500/api/User?view=account(id)&filter=gender:male", "combo", "View with filter"},
		{"GET", "http://localhost:5500/api/User?view=account(id,name,balance)&filter=gender:female", "combo", "Full account view with filter"},
		{"GET", "http://localhost:5500/api/User?sort=firstName&filter=gender:female", "combo", "Sort with filter"},
		{"GET", "http://localhost:5500/api/User?sort=netWorth:desc&filter=isAccountOwner:true", "combo", "Sort by wealth with account owner filter"},
		{"GET", "http://localhost:5500/api/User?view=account(id)&sort=firstName&filter=gender:male", "combo", "View + sort + filter"},
		{"GET", "http://localhost:5500/api/User?view=account(id,name,createdAt)&sort=firstName&filter=gender:male", "combo", "Full view + sort + filter"},
		{"GET", "http://localhost:5500/api/User?view=account(id)&sort=firstName&filter=gender:male&pageSize=3", "combo", "All parameters: view + sort + filter + pagination"},
		{"GET", "http://localhost:5500/api/User?view=account(id,name,balance)&sort=netWorth:desc&filter=isAccountOwner:true&pageSize=2", "combo", "All parameters with wealth focus"},
		{"GET", "http://localhost:5500/api/User?view=account(id)&sort=lastName,firstName&filter=gender:female,netWorth:gte:50000&page=2&pageSize=3", "combo", "Complex multi-field combo"},
		{"POST", "http://localhost:5500/api/User", "crud", "Create new user"},
		{"POST", "http://localhost:5500/api/User?novalidate", "crud", "Create user without validation"},
		{"PUT", "http://localhost:5500/api/User/basic_valid_001", "crud", "Update existing user"},
		{"PUT", "http://localhost:5500/api/User/basic_valid_001?novalidate", "crud", "Update user without validation"},
		{"DELETE", "http://localhost:5500/api/User/basic_valid_001", "crud", "Delete existing user"},
		{"POST", "http://localhost:5500/api/Account", "crud", "Create new account"},
		{"POST", "http://localhost:5500/api/Account?novalidate", "crud", "Create account without validation"},
		{"PUT", "http://localhost:5500/api/Account/valid_account_001", "crud", "Update existing account"},
		{"PUT", "http://localhost:5500/api/Account/valid_account_001?novalidate", "crud", "Update account without validation"},
		{"DELETE", "http://localhost:5500/api/Account/valid_account_001", "crud", "Delete existing account"},
		{"POST", "http://localhost:5500/api/User", "failure", "Create user with invalid data"},
		{"POST", "http://localhost:5500/api/User", "failure", "Create user with duplicate constraint violation"},
		{"POST", "http://localhost:5500/api/User", "failure", "Create user with foreign key violation"},
		{"PUT", "http://localhost:5500/api/User/nonexistent_user_123456", "failure", "Update non-existent user"},
		{"DELETE", "http://localhost:5500/api/User/nonexistent_user_123456", "failure", "Delete non-existent user"},
		{"POST", "http://localhost:5500/api/Account", "failure", "Create account with invalid data"},
		{"POST", "http://localhost:5500/api/Account", "failure", "Create account with duplicate constraint violation"},
		{"PUT", "http://localhost:5500/api/Account/nonexistent_account_123456", "failure", "Update non-existent account"},
		{"DELETE", "http://localhost:5500/api/Account/nonexistent_account_123456", "failure", "Delete non-existent account"},
		{"GET", "http://localhost:5500/api/db/report", "admin", "Get database status report"},
		{"POST", "http://localhost:5500/api/db/init", "admin", "Initialize database"},
		{"POST", "http://localhost:5500/api/db/wipe", "admin", "Wipe database"},
		{"GET", "http://localhost:5500/api/db/health", "admin", "Get database health"},
		{"GET", "http://localhost:5500/api/test/populate", "admin", "Populate test data"},
		{"GET", "http://localhost:5500/api/test/validate", "admin", "Validate all test data"},
		{"GET", "http://localhost:5500/api/test/cleanup", "admin", "Cleanup test data"},
		{"GET", "http://localhost:5500/api/User?sort=invalidField", "edge", "Sort by invalid field"},
		{"GET", "http://localhost:5500/api/User?filter=invalidField:value", "edge", "Filter by invalid field"},
		{"GET", "http://localhost:5500/api/User?view=invalidEntity(id)", "edge", "View invalid entity"},
		{"GET", "http://localhost:5500/api/User?page=0", "edge", "Page 0 (invalid)"},
		{"GET", "http://localhost:5500/api/User?page=-1", "edge", "Negative page number"},
		{"GET", "http://localhost:5500/api/User?pageSize=0", "edge", "Page size 0"},
		{"GET", "http://localhost:5500/api/User?pageSize=-5", "edge", "Negative page size"},
		{"GET", "http://localhost:5500/api/User?pageSize=1000", "edge", "Very large page size"},
		{"GET", "http://localhost:5500/api/User?sort=", "edge", "Empty sort parameter"},
		{"GET", "http://localhost:5500/api/User?filter=", "edge", "Empty filter parameter"},
		{"GET", "http://localhost:5500/api/User?view=", "edge", "Empty view parameter"},
		{"GET", "http://localhost:5500/api/User?sort=firstName:invalid", "edge", "Invalid sort direction"},
		{"GET", "http://localhost:5500/api/User?filter=netWorth:invalid:50000", "edge", "Invalid filter operator"},
		{"GET", "http://localhost:5500/api/User?view=account()", "edge", "Empty view fields"},
		{"GET", "http://localhost:5500/api/User?view=account(invalidField)", "edge", "Invalid view field"},
		{"GET", "http://localhost:5500/api/User?unknown=parameter", "edge", "Unknown query parameter"},
		{"GET", "http://localhost:5500/api/User?sort=firstName&sort=lastName", "edge", "Duplicate sort parameters"},
		{"GET", "http://localhost:5500/api/User?filter=gender:male&filter=gender:female", "edge", "Duplicate filter parameters"},
		{"GET", "http://localhost:5500/api/User?view=account(id)&view=profile(name)", "edge", "Duplicate view parameters"},
		{"GET", "http://localhost:5500/api/InvalidEntity", "edge", "Invalid entity endpoint"},
		{"GET", "http://localhost:5500/api/User/", "edge", "Trailing slash on entity"},
		{"GET", "http://localhost:5500/api/User//", "edge", "Double slash in URL"},
		{"GET", "http://localhost:5500/api/", "edge", "API root endpoint"},
		{"GET", "http://localhost:5500/", "edge", "Root endpoint"},
		{"GET", "http://localhost:5500/api/User?%20invalid=space", "edge", "URL with special characters"},
		{"GET", "http://localhost:5500/api/User?sort=firstName%2Cdesc", "edge", "URL encoded sort parameter"},
		{"GET", "http://localhost:5500/api/User?filter=firstName%3ABasic", "edge", "URL encoded filter parameter"},
		{"POST", "http://localhost:5500/api/User?pageSize=5", "edge", "POST with query parameters"},
		{"PUT", "http://localhost:5500/api/User?sort=firstName", "edge", "PUT with query parameters"},
		{"DELETE", "http://localhost:5500/api/User?filter=gender:male", "edge", "DELETE with query parameters"},
		{"GET", "http://localhost:5500/api/User?sort=firstName,", "edge", "Sort with trailing comma"},
		{"GET", "http://localhost:5500/api/User?filter=gender:male,", "edge", "Filter with trailing comma"},
		{"GET", "http://localhost:5500/api/User?view=account(id,)", "edge", "View with trailing comma"},
		{"GET", "http://localhost:5500/api/User?sort=,firstName", "edge", "Sort with leading comma"},
		{"GET", "http://localhost:5500/api/User?filter=,gender:male", "edge", "Filter with leading comma"},
		{"GET", "http://localhost:5500/api/User?view=account(,id)", "edge", "View with leading comma"},
		{"GET", "http://localhost:5500/api/User?sort=firstName,,lastName", "edge", "Sort with double comma"},
		{"GET", "http://localhost:5500/api/User?filter=gender:male,,isAccountOwner:true", "edge", "Filter with double comma"},
		{"GET", "http://localhost:5500/api/User?view=account(id,,name)", "edge", "View with double comma"},
	}
}

// GetTestCasesByClass returns test cases filtered by test class
func GetTestCasesByClass(testClass string) []TestCase {
	var filtered []TestCase
	for _, tc := range GetAllTestCases() {
		if tc.TestClass == testClass {
			filtered = append(filtered, tc)
		}
	}
	return filtered
}