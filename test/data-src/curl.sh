#!/bin/bash
# Generated curl commands from comprehensive test execution
# Auto-generated by data generation tool

# Function to execute a URL and output structured JSON
execute_url() {
    local method="$1"
    local url="$2"
    local description="$3"
    local category="$4"

    # Execute curl and capture full response with status
    local full_response=$(curl -s -w "\nSTATUS:%{http_code}" -X "$method" "$url")
    local response_body=$(echo "$full_response" | sed '$d')  # Remove last line (status)
    local status=$(echo "$full_response" | tail -n 1 | sed 's/STATUS://')  # Extract status code
    local timestamp=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")

    # Output as key-value pair with URL as key
    local url_path=$(echo "$url" | sed 's|^http[s]*://[^/]*||')
    echo "  \"$url_path\": {"
    echo "    \"method\": \"$method\","
    echo "    \"description\": \"$description\","
    echo "    \"category\": \"$category\","
    echo "    \"status\": $((status)),"
    echo "    \"timestamp\": \"$timestamp\","

    # Check if response_body is valid JSON, if not quote it as string
    if echo "$response_body" | python3 -c "import sys,json; json.load(sys.stdin)" 2>/dev/null; then
        echo "    \"response\": $response_body"
    else
        # Escape quotes and wrap in JSON string
        local escaped_response=$(echo "$response_body" | sed 's/"/\\"/g')
        echo "    \"response\": \"$escaped_response\""
    fi
    echo "  },"
}

# Wrap all output in object braces and fix trailing comma
(
echo "{"

# ========== Basic API Tests ==========
execute_url "GET" "http://localhost:5500/api/User/basic_valid_001" "Get valid user" "basic"
execute_url "GET" "http://localhost:5500/api/User/basic_invalid_enum_001" "Get user with bad enum" "basic"
execute_url "GET" "http://localhost:5500/api/User/basic_invalid_currency_001" "Get user with bad currency" "basic"
execute_url "GET" "http://localhost:5500/api/User/nonexistent_user_123456" "Get non-existent user" "basic"
execute_url "GET" "http://localhost:5500/api/User" "Get user list" "basic"
execute_url "GET" "http://localhost:5500/api/user?pageSize=3" "Get user list with page size" "basic"
# ========== View Parameter Tests ==========
execute_url "GET" "http://localhost:5500/api/User/view_valid_fk_001?view=account(id)" "Get valid user with account ID view" "view"
execute_url "GET" "http://localhost:5500/api/User/view_valid_fk_001?view=account(id,name,createdAt)" "Get valid user with full account view" "view"
execute_url "GET" "http://localhost:5500/api/User/view_valid_fk_002?view=account(id,name)" "Get valid user with different account view" "view"
execute_url "GET" "http://localhost:5500/api/User/view_invalid_fk_001?view=account(id)" "Get user with expired account FK" "view"
execute_url "GET" "http://localhost:5500/api/User/view_missing_fk_001?view=account(id)" "Get user with missing account FK" "view"
execute_url "GET" "http://localhost:5500/api/User/view_valid_fk_001?view=account(nonexistent_field)" "Get valid user with invalid view field" "view"
execute_url "GET" "http://localhost:5500/api/User/view_valid_fk_001?view=badentity(id)" "Get valid user with bad view entity" "view"
execute_url "GET" "http://localhost:5500/api/User?view=account(id)" "Get user list with account ID view" "view"
execute_url "GET" "http://localhost:5500/api/User?view=account(id,name,createdAt)" "Get user list with full account view" "view"
execute_url "GET" "http://localhost:5500/api/User?pageSize=3&view=account(id)" "Get user list with pagination and view" "view"
# ========== Pagination Tests ==========
execute_url "GET" "http://localhost:5500/api/User" "Get user list with default pagination" "page"
execute_url "GET" "http://localhost:5500/api/User?pageSize=5" "Get user list with page size 5" "page"
execute_url "GET" "http://localhost:5500/api/User?page=1&pageSize=5" "Get user list page 1 with size 5" "page"
execute_url "GET" "http://localhost:5500/api/User?page=2&pageSize=5" "Get user list page 2 with size 5" "page"
execute_url "GET" "http://localhost:5500/api/User?page=3&pageSize=5" "Get user list page 3 with size 5" "page"
# ========== Sorting Tests ==========
execute_url "GET" "http://localhost:5500/api/User?sort=firstName" "Sort by firstName ascending" "sort"
execute_url "GET" "http://localhost:5500/api/User?sort=firstName:desc" "Sort by firstName descending" "sort"
execute_url "GET" "http://localhost:5500/api/User?sort=lastName" "Sort by lastName ascending" "sort"
execute_url "GET" "http://localhost:5500/api/User?sort=netWorth" "Sort by netWorth ascending" "sort"
execute_url "GET" "http://localhost:5500/api/User?sort=netWorth:desc" "Sort by netWorth descending" "sort"
execute_url "GET" "http://localhost:5500/api/User?sort=firstName,lastName" "Sort by firstName then lastName" "sort"
execute_url "GET" "http://localhost:5500/api/User?sort=firstName:desc,lastName" "Sort by firstName desc then lastName asc" "sort"
# ========== Filtering Tests ==========
execute_url "GET" "http://localhost:5500/api/User?filter=firstName:Basic" "Filter by firstName contains 'Basic'" "filter"
execute_url "GET" "http://localhost:5500/api/User?filter=gender:male" "Filter by gender male" "filter"
execute_url "GET" "http://localhost:5500/api/User?filter=gender:female" "Filter by gender female" "filter"
execute_url "GET" "http://localhost:5500/api/User?filter=isAccountOwner:true" "Filter by isAccountOwner true" "filter"
execute_url "GET" "http://localhost:5500/api/User?filter=isAccountOwner:false" "Filter by isAccountOwner false" "filter"
execute_url "GET" "http://localhost:5500/api/User?filter=netWorth:gte:50000" "Filter by netWorth >= 50k" "filter"
execute_url "GET" "http://localhost:5500/api/User?filter=netWorth:lte:100000" "Filter by netWorth <= 100k" "filter"
execute_url "GET" "http://localhost:5500/api/User?filter=gender:male,isAccountOwner:true" "Filter by gender male and account owner" "filter"
# ========== Case Sensitivity Tests ==========
execute_url "GET" "http://localhost:5500/api/User?pagesize=5" "pagesize parameter (lowercase)" "case"
execute_url "GET" "http://localhost:5500/api/User?sort=firstname" "Sort by firstname (lowercase)" "case"
execute_url "GET" "http://localhost:5500/api/User?filter=firstname:Basic" "Filter by firstname (lowercase)" "case"
execute_url "GET" "http://localhost:5500/api/User?Page=1&PageSize=5" "Mixed case Page and PageSize" "case"
execute_url "GET" "http://localhost:5500/api/User?sort=FirstName" "Mixed case field in sort" "case"
execute_url "GET" "http://localhost:5500/api/User?filter=GENDER:male" "Uppercase field in filter" "case"
# ========== Combination Tests ==========
execute_url "GET" "http://localhost:5500/api/User?view=account(id)&sort=firstName" "View with sort" "combo"
execute_url "GET" "http://localhost:5500/api/User?view=account(id)&filter=gender:male" "View with filter" "combo"
execute_url "GET" "http://localhost:5500/api/User?sort=firstName&filter=gender:female" "Sort with filter" "combo"
execute_url "GET" "http://localhost:5500/api/User?view=account(id)&sort=firstName&filter=gender:male&pageSize=3" "All parameters: view + sort + filter + pagination" "combo"

# Close JSON object (remove trailing comma and add closing brace)
) | sed '$s/,$/}/'
