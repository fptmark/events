from fastapi import APIRouter, HTTPException
from typing import List
from app.models.{entity_lower}_model import {entity}
from app.utils.db import Database
from bson import ObjectId
import logging 

router = APIRouter()

# CRUD Operations
@router.post('/', response_model={entity})
async def create_{entity_lower}(item: {entity}):
    db = Database.get_db()
    item_dict = item.dict()
    item_dict['_id'] = str(ObjectId())
    logging.info(f"Creating {entity_lower}: {item_dict}")
    await db['{entity_lower}s'].insert_one(item_dict)
    logging.info(f"{entity} created: {item_dict}")
    return item_dict

@router.get('/', response_model=List[{entity}])
async def get_all_{entity_lower}s():
    db = Database.get_db()
    items = await db['{entity_lower}s'].find().to_list(None)
    return items

@router.get('/{item_id}', response_model={entity})
async def get_{entity_lower}(item_id: str):
    db = Database.get_db()
    item = await db['{entity_lower}s'].find_one({'_id': ObjectId(item_id)})
    if not item:
        raise HTTPException(status_code=404, detail='{entity} not found')
    return item

@router.put('/{item_id}', response_model={entity})
async def update_{entity_lower}(item_id: str, item: {entity}):
    db = Database.get_db()
    result = await db['{entity_lower}s'].update_one({'_id': ObjectId(item_id)}, {'$set': item.dict()})
    if not result.matched_count:
        raise HTTPException(status_code=404, detail='{entity} not found')
    return item

@router.delete('/{item_id}')
async def delete_{entity_lower}(item_id: str):
    db = Database.get_db()
    result = await db['{entity_lower}s'].delete_one({'_id': ObjectId(item_id)})
    if not result.deleted_count:
        raise HTTPException(status_code=404, detail='{entity} not found')
    return {'message': '{entity} deleted successfully'}
