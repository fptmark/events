from fastapi import APIRouter, HTTPException, Depends
from typing import List, Any
from pydantic import BaseModel
from app.models.{entity_singular}_model import {entity_name}
from app.utils.db import Database
from bson import ObjectId
import logging
{validation_imports}

router = APIRouter()

# Pydantic Model for Request Validation
class {entity_name}Create(BaseModel):
    {pydantic_fields}

# CREATE
@router.post('/', response_model={entity_name})
async def create_{entity_lower}(item: {entity_name}Create):
{validation_code}
    db = Database.get_db()
    item_dict = item.dict()
    item_dict['_id'] = str(ObjectId())
    logging.info(f"Creating {entity_lower}: {item_dict}")
    await db['{entity_lower}'].insert_one(item_dict)  # <-- Singular Collection Name
    return item_dict

# GET ALL
@router.get('/', response_model=List[{entity_name}])
async def get_all_{entity_lower}s():
    db = Database.get_db()
    items = await db['{entity_lower}'].find().to_list(None)  # <-- Singular Collection Name
    return items

# GET ONE BY ID
@router.get('/{item_id}', response_model={entity_name})
async def get_{entity_lower}(item_id: str):
    db = Database.get_db()
    item = await db['{entity_lower}'].find_one({'_id': ObjectId(item_id)})  # <-- Singular Collection Name
    if not item:
        raise HTTPException(status_code=404, detail='{entity_lower} not found')
    return item

# UPDATE
@router.put('/{item_id}', response_model={entity_name})
async def update_{entity_lower}(item_id: str, item: {entity_name}Create):
{validation_code}
    db = Database.get_db()
    result = await db['{entity_lower}'].update_one({'_id': ObjectId(item_id)}, {'$set': item.dict()})  # <-- Singular Collection Name
    if not result.matched_count:
        raise HTTPException(status_code=404, detail='{entity_lower} not found')
    return item

# DELETE
@router.delete('/{item_id}')
async def delete_{entity_lower}(item_id: str):
    db = Database.get_db()
    result = await db['{entity_lower}'].delete_one({'_id': ObjectId(item_id)})  # <-- Singular Collection Name
    if not result.deleted_count:
        raise HTTPException(status_code=404, detail='{entity_lower} not found')
    return {'message': '{entity_lower} deleted successfully'}
