{
  "openapi": "3.0.3",
  "info": {
    "title": "Events Management API",
    "description": "Comprehensive API documentation generated from schema metadata",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:5500/api",
      "description": "Development server"
    }
  ],
  "paths": {
    "/account": {},
    "/account/{id}": {},
    "/user": {
      "get": {
        "summary": "List Users",
        "description": "Retrieve all user entities",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "List of users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "post": {
        "summary": "Create User",
        "description": "Create a new user entity",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "409": {
            "$ref": "#/components/responses/DuplicateError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "summary": "Get User",
        "description": "Retrieve a specific user by ID",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectid"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "put": {
        "summary": "Update User",
        "description": "Update a specific user by ID",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectid"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "409": {
            "$ref": "#/components/responses/DuplicateError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/profile": {},
    "/profile/{id}": {},
    "/tagaffinity": {},
    "/tagaffinity/{id}": {},
    "/event": {},
    "/event/{id}": {},
    "/userevent": {},
    "/userevent/{id}": {},
    "/url": {},
    "/url/{id}": {},
    "/crawl": {
      "get": {
        "summary": "List Crawls",
        "description": "Retrieve all crawl entities",
        "tags": [
          "Crawl"
        ],
        "responses": {
          "200": {
            "description": "List of crawls retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlListResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/crawl/{id}": {
      "get": {
        "summary": "Get Crawl",
        "description": "Retrieve a specific crawl by ID",
        "tags": [
          "Crawl"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectid"
            },
            "description": "Crawl ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrawlResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete Crawl",
        "description": "Delete a specific crawl by ID",
        "tags": [
          "Crawl"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "objectid"
            },
            "description": "Crawl ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Crawl deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "expiredAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [],
        "description": "Account entity"
      },
      "AccountCreate": {
        "type": "object",
        "properties": {
          "expiredAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [],
        "description": "Create Account request"
      },
      "AccountUpdate": {
        "type": "object",
        "properties": {
          "expiredAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [],
        "description": "Update Account request"
      },
      "AccountResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Account"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a single Account"
      },
      "AccountListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a list of Accounts"
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "description": "String field",
            "example": "examplex"
          },
          "email": {
            "type": "string",
            "minLength": 8,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
            "description": "String field",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "String field",
            "example": "examplex"
          },
          "firstName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100,
            "description": "First Name",
            "example": "examplex"
          },
          "lastName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100,
            "description": "Last Name",
            "example": "examplex"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "description": "One of: male, female, other",
            "example": "male"
          },
          "dob": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "isAccountOwner": {
            "type": "boolean",
            "description": "Owner",
            "example": true
          },
          "netWorth": {
            "type": "number",
            "format": "currency",
            "minimum": 0,
            "maximum": 10000000,
            "description": "Monetary value",
            "example": 1000.0
          },
          "accountId": {
            "type": "string",
            "format": "objectid",
            "description": "Account",
            "example": "507f1f77bcf86cd799439011"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [
          "username",
          "email",
          "password",
          "firstName",
          "lastName",
          "isAccountOwner",
          "accountId"
        ],
        "description": "Manage User Profile"
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "description": "String field",
            "example": "examplex"
          },
          "email": {
            "type": "string",
            "minLength": 8,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
            "description": "String field",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "String field",
            "example": "examplex"
          },
          "firstName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100,
            "description": "First Name",
            "example": "examplex"
          },
          "lastName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100,
            "description": "Last Name",
            "example": "examplex"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "description": "One of: male, female, other",
            "example": "male"
          },
          "dob": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "isAccountOwner": {
            "type": "boolean",
            "description": "Owner",
            "example": true
          },
          "netWorth": {
            "type": "number",
            "format": "currency",
            "minimum": 0,
            "maximum": 10000000,
            "description": "Monetary value",
            "example": 1000.0
          },
          "accountId": {
            "type": "string",
            "format": "objectid",
            "description": "Account",
            "example": "507f1f77bcf86cd799439011"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [
          "username",
          "email",
          "password",
          "firstName",
          "lastName",
          "isAccountOwner",
          "accountId"
        ],
        "description": "Create User request"
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "minLength": 3,
            "maxLength": 50,
            "description": "String field",
            "example": "examplex"
          },
          "email": {
            "type": "string",
            "minLength": 8,
            "maxLength": 50,
            "pattern": "^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+.[a-zA-Z]{2,}$",
            "description": "String field",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "String field",
            "example": "examplex"
          },
          "firstName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100,
            "description": "First Name",
            "example": "examplex"
          },
          "lastName": {
            "type": "string",
            "minLength": 3,
            "maxLength": 100,
            "description": "Last Name",
            "example": "examplex"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "description": "One of: male, female, other",
            "example": "male"
          },
          "dob": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "isAccountOwner": {
            "type": "boolean",
            "description": "Owner",
            "example": true
          },
          "netWorth": {
            "type": "number",
            "format": "currency",
            "minimum": 0,
            "maximum": 10000000,
            "description": "Monetary value",
            "example": 1000.0
          },
          "accountId": {
            "type": "string",
            "format": "objectid",
            "description": "Account",
            "example": "507f1f77bcf86cd799439011"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [],
        "description": "Update User request"
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/User"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a single User"
      },
      "UserListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a list of Users"
      },
      "Profile": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "String field",
            "example": "examplex"
          },
          "preferences": {
            "type": "string",
            "description": "String field",
            "example": "examplex"
          },
          "radiusMiles": {
            "type": "integer",
            "minimum": 0,
            "description": "Integer field",
            "example": 42
          },
          "userId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [
          "name",
          "userId"
        ],
        "description": "Manage User Preferences"
      },
      "ProfileCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "String field",
            "example": "examplex"
          },
          "preferences": {
            "type": "string",
            "description": "String field",
            "example": "examplex"
          },
          "radiusMiles": {
            "type": "integer",
            "minimum": 0,
            "description": "Integer field",
            "example": 42
          },
          "userId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [
          "name",
          "userId"
        ],
        "description": "Create Profile request"
      },
      "ProfileUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "String field",
            "example": "examplex"
          },
          "preferences": {
            "type": "string",
            "description": "String field",
            "example": "examplex"
          },
          "radiusMiles": {
            "type": "integer",
            "minimum": 0,
            "description": "Integer field",
            "example": 42
          },
          "userId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [],
        "description": "Update Profile request"
      },
      "ProfileResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Profile"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a single Profile"
      },
      "ProfileListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Profile"
            }
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a list of Profiles"
      },
      "TagAffinity": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "maxLength": 50,
            "description": "String field",
            "example": "examplex"
          },
          "affinity": {
            "type": "integer",
            "minimum": -100,
            "maximum": 100,
            "description": "Integer field",
            "example": 42
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "profileId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "tag",
          "affinity",
          "profileId"
        ],
        "description": "TagAffinity entity"
      },
      "TagAffinityCreate": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "maxLength": 50,
            "description": "String field",
            "example": "examplex"
          },
          "affinity": {
            "type": "integer",
            "minimum": -100,
            "maximum": 100,
            "description": "Integer field",
            "example": 42
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "profileId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "tag",
          "affinity",
          "profileId"
        ],
        "description": "Create TagAffinity request"
      },
      "TagAffinityUpdate": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "maxLength": 50,
            "description": "String field",
            "example": "examplex"
          },
          "affinity": {
            "type": "integer",
            "minimum": -100,
            "maximum": 100,
            "description": "Integer field",
            "example": 42
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "profileId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [],
        "description": "Update TagAffinity request"
      },
      "TagAffinityResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TagAffinity"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a single TagAffinity"
      },
      "TagAffinityListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagAffinity"
            }
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a list of TagAffinitys"
      },
      "Event": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "pattern": "^https?://[^s]+$",
            "description": "String field",
            "example": "https://example.com"
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "description": "String field",
            "example": "examplex"
          },
          "dateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "location": {
            "type": "string",
            "maxLength": 200,
            "description": "String field",
            "example": "examplex"
          },
          "cost": {
            "type": "number",
            "minimum": 0,
            "description": "Number field",
            "example": 123.45
          },
          "numOfExpectedAttendees": {
            "type": "integer",
            "minimum": 0,
            "description": "Integer field",
            "example": 42
          },
          "recurrence": {
            "type": "string",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "yearly"
            ],
            "description": "One of: daily, weekly, monthly, yearly",
            "example": "daily"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array[String] field",
            "example": [
              "item1",
              "item2"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [
          "url",
          "title",
          "dateTime"
        ],
        "description": "Event entity"
      },
      "EventCreate": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "pattern": "^https?://[^s]+$",
            "description": "String field",
            "example": "https://example.com"
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "description": "String field",
            "example": "examplex"
          },
          "dateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "location": {
            "type": "string",
            "maxLength": 200,
            "description": "String field",
            "example": "examplex"
          },
          "cost": {
            "type": "number",
            "minimum": 0,
            "description": "Number field",
            "example": 123.45
          },
          "numOfExpectedAttendees": {
            "type": "integer",
            "minimum": 0,
            "description": "Integer field",
            "example": 42
          },
          "recurrence": {
            "type": "string",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "yearly"
            ],
            "description": "One of: daily, weekly, monthly, yearly",
            "example": "daily"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array[String] field",
            "example": [
              "item1",
              "item2"
            ]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [
          "url",
          "title",
          "dateTime"
        ],
        "description": "Create Event request"
      },
      "EventUpdate": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "pattern": "^https?://[^s]+$",
            "description": "String field",
            "example": "https://example.com"
          },
          "title": {
            "type": "string",
            "maxLength": 200,
            "description": "String field",
            "example": "examplex"
          },
          "dateTime": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "location": {
            "type": "string",
            "maxLength": 200,
            "description": "String field",
            "example": "examplex"
          },
          "cost": {
            "type": "number",
            "minimum": 0,
            "description": "Number field",
            "example": 123.45
          },
          "numOfExpectedAttendees": {
            "type": "integer",
            "minimum": 0,
            "description": "Integer field",
            "example": 42
          },
          "recurrence": {
            "type": "string",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "yearly"
            ],
            "description": "One of: daily, weekly, monthly, yearly",
            "example": "daily"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array[String] field",
            "example": [
              "item1",
              "item2"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [],
        "description": "Update Event request"
      },
      "EventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Event"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a single Event"
      },
      "EventListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a list of Events"
      },
      "UserEvent": {
        "type": "object",
        "properties": {
          "attended": {
            "type": "boolean",
            "description": "True or false value",
            "example": true
          },
          "rating": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "description": "Integer field",
            "example": 5
          },
          "note": {
            "type": "string",
            "maxLength": 500,
            "description": "String field",
            "example": "examplex"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "userId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          },
          "eventId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "userId",
          "eventId"
        ],
        "description": "UserEvent entity"
      },
      "UserEventCreate": {
        "type": "object",
        "properties": {
          "attended": {
            "type": "boolean",
            "description": "True or false value",
            "example": true
          },
          "rating": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "description": "Integer field",
            "example": 5
          },
          "note": {
            "type": "string",
            "maxLength": 500,
            "description": "String field",
            "example": "examplex"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "userId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          },
          "eventId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "userId",
          "eventId"
        ],
        "description": "Create UserEvent request"
      },
      "UserEventUpdate": {
        "type": "object",
        "properties": {
          "attended": {
            "type": "boolean",
            "description": "True or false value",
            "example": true
          },
          "rating": {
            "type": "integer",
            "minimum": 1,
            "maximum": 5,
            "description": "Integer field",
            "example": 5
          },
          "note": {
            "type": "string",
            "maxLength": 500,
            "description": "String field",
            "example": "examplex"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "userId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          },
          "eventId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [],
        "description": "Update UserEvent request"
      },
      "UserEventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserEvent"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a single UserEvent"
      },
      "UserEventListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEvent"
            }
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a list of UserEvents"
      },
      "Url": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "pattern": "main.url",
            "description": "String field",
            "example": "examplex"
          },
          "params": {
            "type": "string",
            "description": "JSON field",
            "example": "example"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [
          "url"
        ],
        "description": "Manage Event Urls"
      },
      "UrlCreate": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "pattern": "main.url",
            "description": "String field",
            "example": "examplex"
          },
          "params": {
            "type": "string",
            "description": "JSON field",
            "example": "example"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [
          "url"
        ],
        "description": "Create Url request"
      },
      "UrlUpdate": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "pattern": "main.url",
            "description": "String field",
            "example": "examplex"
          },
          "params": {
            "type": "string",
            "description": "JSON field",
            "example": "example"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          }
        },
        "required": [],
        "description": "Update Url request"
      },
      "UrlResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Url"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a single Url"
      },
      "UrlListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Url"
            }
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a list of Urls"
      },
      "Crawl": {
        "type": "object",
        "properties": {
          "lastParsedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "parseStatus": {
            "type": "string",
            "description": "JSON field",
            "example": "example"
          },
          "errorsEncountered": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array[String] field",
            "example": [
              "item1",
              "item2"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "urlId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "urlId"
        ],
        "description": "Manage Crawls of Event sites"
      },
      "CrawlCreate": {
        "type": "object",
        "properties": {
          "lastParsedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "parseStatus": {
            "type": "string",
            "description": "JSON field",
            "example": "example"
          },
          "errorsEncountered": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array[String] field",
            "example": [
              "item1",
              "item2"
            ]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-updated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "urlId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [
          "urlId"
        ],
        "description": "Create Crawl request"
      },
      "CrawlUpdate": {
        "type": "object",
        "properties": {
          "lastParsedDate": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time in ISO format",
            "example": "2024-01-01T12:00:00Z"
          },
          "parseStatus": {
            "type": "string",
            "description": "JSON field",
            "example": "example"
          },
          "errorsEncountered": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array[String] field",
            "example": [
              "item1",
              "item2"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Auto-generated isodate field",
            "example": "2024-01-01T12:00:00Z"
          },
          "urlId": {
            "type": "string",
            "format": "objectid",
            "description": "Reference to another entity",
            "example": "507f1f77bcf86cd799439011"
          }
        },
        "required": [],
        "description": "Update Crawl request"
      },
      "CrawlResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Crawl"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a single Crawl"
      },
      "CrawlListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Crawl"
            }
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ],
            "nullable": true
          },
          "notifications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Notification"
            }
          },
          "summary": {
            "$ref": "#/components/schemas/NotificationSummary"
          }
        },
        "description": "Response containing a list of Crawls"
      },
      "Notification": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "level": {
            "type": "string",
            "enum": [
              "success",
              "info",
              "warning",
              "error"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "validation",
              "database",
              "business",
              "system",
              "security"
            ]
          },
          "entity": {
            "type": "string",
            "nullable": true
          },
          "operation": {
            "type": "string",
            "nullable": true
          },
          "field": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "entity_id": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NotificationSummary": {
        "type": "object",
        "properties": {
          "total_entities": {
            "type": "integer"
          },
          "perfect": {
            "type": "integer"
          },
          "successful": {
            "type": "integer"
          },
          "warnings": {
            "type": "integer"
          },
          "errors": {
            "type": "integer"
          }
        }
      },
      "DeleteResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          },
          "level": {
            "type": "string",
            "enum": [
              "success"
            ]
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "nullable": true
                },
                "message": {
                  "type": "string"
                },
                "level": {
                  "type": "string",
                  "enum": [
                    "error"
                  ]
                },
                "notifications": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          }
        }
      },
      "NotFoundError": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "nullable": true
                },
                "message": {
                  "type": "string"
                },
                "level": {
                  "type": "string",
                  "enum": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      },
      "DuplicateError": {
        "description": "Duplicate resource error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "nullable": true
                },
                "message": {
                  "type": "string"
                },
                "level": {
                  "type": "string",
                  "enum": [
                    "error"
                  ]
                },
                "notifications": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Notification"
                  }
                }
              }
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "nullable": true
                },
                "message": {
                  "type": "string"
                },
                "level": {
                  "type": "string",
                  "enum": [
                    "error"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "parameters": {},
    "securitySchemes": {
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "session"
      }
    }
  }
}