erDiagram
    BaseEntity {
        ObjectId _id      %% @validate { required: true, autoGenerate: true }
        ISODate createdAt %% @validate { required: true, autoGenerate: true }
        ISODate updatedAt %% @validate { required: true, autoUpdate: true }
    }


    Account {
        ISODate expiredAt %% @validate { required: false }
    
    	%% @inherit BaseEntity
    }


    User {
        ObjectId accountId       %% @validate { required: true }
        String username          %% @validate { required: true, minLength: 3, maxLength: 50 }
        String email             %% @validate { required: true, minLength: 8, maxLength: 50, pattern: dictionary=pattern.email, pattern.message: "Bad email address format" }
        String password          %% @validate { required: true, minLength: 8 }
        String firstName         %% @validate { required: true, minLength: 3, maxLength: 100 }
        String lastName          %% @validate { required: true, minLength: 3, maxLength: 100 }
        String gender            %% @validate { required: false, enum: [male, female, other], enum.message: "must be male or female" }
        Boolean isAccountOwner   %% @validate { required: true }
    
    	%% @inherit BaseEntity
    	%% @service auth.cookies.redis ### Use cookie authentication model and redis for the backing store
    	%% @unique username
    	%% @unique email
    }


    Profile {
        ObjectId userId      %% @validate { required: true }
        String name          %% @validate { required: true, maxLength: 100 }
        JSON preferences     %% @validate { required: false }
        Integer radiusMiles  %% @validate { required: false, min: 0 }
    
    	%% @inherit BaseEntity
    	%% @unique name + userId
    }


    TagAffinity {
        ObjectId profileId    %% @validate { required: true }
        String tag            %% @validate { required: true, maxLength: 50 }
        Integer affinity      %% @validate { required: true, min: -100, max: 100 }
    
    	%% @inherit BaseEntity
    	%% @unique profileId + tag
    }


    Event {
        String url                         %% @validate { required: true, pattern: dictionary=pattern.url, pattern.message: "Bad URL format" }
        String title                       %% @validate { required: true, maxLength: 200 }
        ISODate dateTime                   %% @validate { required: true }
        String location                    %% @validate { required: false, maxLength: 200 }
        Number cost                        %% @validate { required: false, min: 0 }
        Integer numOfExpectedAttendees     %% @validate { required: false, min: 0 }
        String recurrence                  %% @validate { required: false, enum: [daily, weekly, monthly, yearly] }
        Array[String] tags                 %% @validate { required: false }
    
    	%% @inherit BaseEntity
    }


    UserEvent {
        ObjectId userId      %% @validate { required: true }
        ObjectId eventId     %% @validate { required: true }
        Boolean attended     %% @validate { required: false }
        Integer rating       %% @validate { required: false, min: 1, max: 5 }
        String note          %% @validate { required: false, maxLength: 500 }
    
    	%% @inherit BaseEntity
    }


    Url {
        String url       %% @validate { required: true, pattern: dictionary=pattern.url, pattern.message: "Bad URL format" }
        JSON params      %% @validate { required: false }
    
    	%% @inherit BaseEntity
    }

    Crawl {
        ObjectId urlId                     %% @validate { required: true }
        ISODate lastParsedDate             %% @validate { required: false }
        JSON parseStatus                   %% @validate { required: false }
        Array[String] errorsEncountered    %% @validate { required: false }
    
    	%% @inherit BaseEntity
    }


    Account ||--o{ User: ""
    User ||--o{ Profile: ""
    Profile ||--o{ TagAffinity: ""
    User ||--o{ UserEvent: ""
    Event ||--o{ UserEvent: ""
    Url ||--o{ Crawl: ""
%% @dictionary pattern { email: "^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", url: "^https?://[^\s]+$" }
